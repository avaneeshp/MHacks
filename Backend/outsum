{
  "Summary": "## EECS 370 - Lecture 11: Single & Multi-Cycle Datapaths

This lecture delves into the design and implementation of datapaths in processors, covering both single-cycle and multi-cycle approaches. 

**Key Concepts:**

* **Datapath:** The component of a processor responsible for data movement and manipulation. It consists of various building blocks like ALUs, registers, multiplexers, and control units.
* **Single-Cycle Datapath:** Each instruction completes execution within a single clock cycle. While simple, it suffers from performance limitations as all instructions must adhere to the speed of the slowest one.
* **Multi-Cycle Datapath:** Instructions are broken down into multiple cycles, allowing for more efficient utilization of resources and improved performance. This involves using a finite state machine (FSM) to control the sequence of operations for each instruction.
* **LC2K Datapath:** The lecture uses the LC2K architecture as a case study to illustrate datapath implementation. It explores how different instructions like ADD, NOR, LW, SW, and BEQ are executed on both single-cycle and multi-cycle datapaths. 
* **Control Signals:** The lecture emphasizes the importance of control signals in directing data flow and operations within the datapath. These signals are generated by the control unit and dictate the behavior of various components like multiplexers, ALUs, and memory access.
* **Challenges and Trade-offs:** The lecture discusses the limitations of single-cycle datapaths, particularly in terms of performance and flexibility. It also highlights the increased complexity of control logic in multi-cycle designs.

**Building Blocks of a Datapath:**

* **Control ROM:** Stores the control signals for each instruction and state, guiding the datapath's operation.
* **Multiplexers (MUXs):** Select data from multiple input sources based on control signals.
* **Decoders:** Activate specific output lines based on input values.
* **Arithmetic Logic Unit (ALU):** Performs arithmetic and logical operations on data.
* **Sign Extension Unit:** Extends the sign bit of data to match the width of the ALU. 
* **Register File:** Stores temporary data values for quick access.
* **Memory:** Stores instructions and data for the processor.

**Implementing a Multi-Cycle Datapath:**

* **Finite State Machine (FSM):** Controls the sequence of operations for each instruction across multiple cycles.
* **State Transitions:** The FSM transitions between states based on the current instruction and the completion of operations in the previous cycle. 
* **Control ROM Design:** The control signals for each state and instruction are stored in a ROM, which is accessed by the FSM to determine the next set of control signals. 

**Overall, the lecture provides a comprehensive understanding of datapaths and their role in processor design. It explores the trade-offs between single-cycle and multi-cycle approaches and delves into the details of implementing a multi-cycle datapath using the LC2K architecture.**

"
}
